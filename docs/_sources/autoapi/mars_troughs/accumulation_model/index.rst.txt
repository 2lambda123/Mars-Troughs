:py:mod:`mars_troughs.accumulation_model`
=========================================

.. py:module:: mars_troughs.accumulation_model

.. autoapi-nested-parse::

   Model for the accumulation rates.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mars_troughs.accumulation_model.AccumulationModel
   mars_troughs.accumulation_model.TimeDependentAccumulationModel
   mars_troughs.accumulation_model.LinearInsolation
   mars_troughs.accumulation_model.QuadraticInsolation
   mars_troughs.accumulation_model.LinearObliquity




Attributes
~~~~~~~~~~

.. autoapisummary::

   mars_troughs.accumulation_model.ACCUMULATION_MODEL_MAP


.. py:class:: AccumulationModel(sub_models: Optional[List[Model]] = None)

   Bases: :py:obj:`mars_troughs.model.Model`

   Abstract class for computing the amount of ice accumulation.

   .. py:attribute:: prefix
      :annotation: :str = acc_

      All parameters of accumulations models start with 'acc'.

   .. py:method:: get_accumulation_at_t(self, time: numpy.ndarray) -> numpy.ndarray
      :abstractmethod:



.. py:class:: TimeDependentAccumulationModel(times: numpy.ndarray, variable: numpy.ndarray)

   Bases: :py:obj:`AccumulationModel`

   An accumulation rate model that depends on the time dependent parameter
   (likely solar insolation or obliquity), A(Var(t)).
   A is in m/year. Interpolated splines are created for the parameter as
   a function of time for faster integration.

   :param times: times at which the variable (solar insolation, obliquity) is known
                 (in years)
   :type times: np.ndarray
   :param parameter: values of the time dependent variable
   :type parameter: np.ndarray
   :param (solar insolation:
   :type (solar insolation: in W/m^2), obliquity (in degrees)

   .. py:method:: get_accumulation_at_t(self, time: numpy.ndarray) -> numpy.ndarray

      Calculates the accumulation rate at times "time".

      :param time: times at which we want to calculate A, in years.
      :type time: np.ndarray

      Output:
          np.ndarray of the same size as time input containing values of
          accumulation rates A, in m/year



   .. py:method:: get_xt(self, time: numpy.ndarray, int_retreat_model_t_spline: numpy.ndarray, cot_angle, csc_angle)

      Calculates the horizontal distance x (in m) traveled by a point in the
      center of the high side of the trough. This distance x is a function of
      the accumulation rate A(ins(t)) and the retreat rate of ice R(l(t),t)
      as in dx/dt=(R(l(t),t)+A(ins(t))cos(theta))/sin(theta). Where theta
      is the slope angle of the trough.

      :param time: times at which we want the path.
      :type time: np.ndarray

      Output:
          horizontal distances (np.ndarray) of the same size as time input, in
          meters.



.. py:class:: LinearInsolation(times: numpy.ndarray, insolations: numpy.ndarray, constant: float = 1e-06, slope: float = 1e-06)

   Bases: :py:obj:`TimeDependentAccumulationModel`, :py:obj:`mars_troughs.generic_model.LinearModel`

   Accumulation is linear in solar insolation.
   A(ins(t)) = constant + slope*ins(t).
   A is in m/year.

   :param times: times at which the solar insolation is known
                 (in years)
   :type times: np.ndarray
   :param insolation values: values of solar insolation (in W/m^2)
   :type insolation values: np.ndarray
   :param constant: accumulation rate at present time.
                    Default is 1e-6 m/year
   :type constant: float, optional
   :param slope: default is 1e-6 m/year per unit
                 of solar insolation (m^3/(year*W)).
   :type slope: float, optional

   .. py:method:: get_yt(self, time: numpy.ndarray)

      Calculates the vertical distance y (in m) traveled by a point
      in the center of the high side of the trough. This distance  is a
      function of the accumulation rate A as y(t)=integral(A(ins(t)), dt) or
      dy/dt=A(ins(t))

      :param time: times at which we want to calculate y, in years.
      :type time: np.ndarray

      Output:
          np.ndarray of the same size as time input containing values of
          the vertical distance y, in meters.




.. py:class:: QuadraticInsolation(times, insolation, constant: float = 1.0, slope: float = 1e-06, quad: float = 1e-06)

   Bases: :py:obj:`TimeDependentAccumulationModel`, :py:obj:`mars_troughs.generic_model.QuadModel`

   Accumulation rate A (in m/year) as a  quadratic polynomial of insolation.
   A(ins(t)) = constant + slope*ins(t)+ quad*ins(t)^2.
   A is in m/year.

   :param times: times at which the solar insolation is known, in
                 years.
   :type times: np.ndarray
   :param insolations: value of the solar insolations (in W/m^2)
   :type insolations: np.ndarray
   :param constant: default is 1 m/year
   :type constant: float, optional
   :param slope: default is 1e-6 m/year per unit
                 of solar insolation (m^3/(year*W)).
   :type slope: float, optional
   :param quad: default is 1e-6 m/year per unit
                of solar insolation squared (m^5/(year*W^2)).
   :type quad: float, optional

   .. py:method:: get_yt(self, time: numpy.ndarray)

      Calculates the vertical distance y (in m) at traveled by a point
      in the center of the high side of the trough. This distance  is a
      function of the accumulation rate A as y(t)=integral(A(ins(t)), dt) or
      dy/dt=A(ins(t))

      :param time: times at which we want to calculate y, in years.
      :type time: np.ndarray

      Output:
          np.ndarray of the same size as time input containing values of
          the vertical distance y, in meters.




.. py:class:: LinearObliquity(obl_times: numpy.ndarray, obliquity: numpy.ndarray, constant: float = 1.0, slope: float = 1.0)

   Bases: :py:obj:`TimeDependentAccumulationModel`, :py:obj:`mars_troughs.generic_model.LinearModel`

   An accumulation rate model that depends on the time dependent parameter
   (likely solar insolation or obliquity), A(Var(t)).
   A is in m/year. Interpolated splines are created for the parameter as
   a function of time for faster integration.

   :param times: times at which the variable (solar insolation, obliquity) is known
                 (in years)
   :type times: np.ndarray
   :param parameter: values of the time dependent variable
   :type parameter: np.ndarray
   :param (solar insolation:
   :type (solar insolation: in W/m^2), obliquity (in degrees)

   .. py:method:: get_yt(self, time: numpy.ndarray)

      Calculates the vertical distance y (in m) traveled by a point
      in the center of the high side of the trough. This distance  is a
      function of the accumulation rate A as y(t)=integral(A(obl(t)), dt) or
      dy/dt=A(obl(t))

      :param time: times at which we want to calculate y, in years.
      :type time: np.ndarray

      Output:
          np.ndarray of the same size as time input containing values of
          the vertical distance y, in meters.




.. py:data:: ACCUMULATION_MODEL_MAP
   :annotation: :Dict[str, mars_troughs.model.Model]

   

