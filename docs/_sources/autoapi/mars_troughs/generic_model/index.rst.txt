:py:mod:`mars_troughs.generic_model`
====================================

.. py:module:: mars_troughs.generic_model

.. autoapi-nested-parse::

   Created on Thu May  6 10:37:51 2021

   @author: laferrierek

   Linear model for both accumulation and lag



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mars_troughs.generic_model.ConstantModel
   mars_troughs.generic_model.LinearModel
   mars_troughs.generic_model.QuadModel




.. py:class:: ConstantModel(constant: float = 1.0)

   Bases: :py:obj:`mars_troughs.model.Model`

   A model where the parameter is a constant value.
   The :meth:`eval` method returns the :attr:`constant`
   attribute.

   :param constant: default value is 1. The
                    constant value returned by :meth:`eval`. It is a
                    parameter.
   :type constant: float, optional

   .. py:method:: parameter_names(self) -> List[str]
      :property:

      Returns ``["constant"]``


   .. py:method:: eval(self, x: Union[numbers.Number, numpy.ndarray]) -> Union[numbers.Number, numpy.ndarray]

      Returns the value of :attr:`constant`.



.. py:class:: LinearModel(constant: float = 1.0, slope: float = 1.0)

   Bases: :py:obj:`mars_troughs.model.Model`

   A model where the output is linearly proportional to the x value.

   :param constant: default value is 1.
   :type constant: float, optional
   :param slope: default value is 1.
   :type slope: float, optional
   :param y = slope*x + constant:

   .. py:method:: parameter_names(self) -> List[str]
      :property:


   .. py:method:: eval(self, x: Union[numbers.Number, numpy.ndarray]) -> Union[numbers.Number, numpy.ndarray]



.. py:class:: QuadModel(constant: float = 1.0, slope: float = 1e-06, quad: float = 1e-06)

   Bases: :py:obj:`mars_troughs.model.Model`

   A model for a quadratic function of the input

   :param constant:
   :type constant: float, optional
   :param slope:
   :type slope: float, optional
   :param quadcoeff:
   :type quadcoeff: float, optional
   :param y = constant + linearcoeff*x + quadcoeff*x^2:

   .. py:method:: parameter_names(self) -> List[str]
      :property:


   .. py:method:: eval(self, x: Union[numbers.Number, numpy.ndarray]) -> Union[numbers.Number, numpy.ndarray]



