:mod:`mars_troughs`
===================

.. py:module:: mars_troughs


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   accumulation_model/index.rst
   datapaths/index.rst
   generic_model/index.rst
   lag_model/index.rst
   model/index.rst
   trough/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   mars_troughs.AccumulationModel
   mars_troughs.Linear_Insolation
   mars_troughs.Linear_Obliquity
   mars_troughs.Quadratic_Insolation
   mars_troughs.ConstantLag
   mars_troughs.LagModel
   mars_troughs.LinearLag
   mars_troughs.Model
   mars_troughs.Trough




Attributes
~~~~~~~~~~

.. autoapisummary::

   mars_troughs.ACCUMULATION_MODEL_MAP
   mars_troughs.DATAPATHS
   mars_troughs.LAG_MODEL_MAP
   mars_troughs.__author__
   mars_troughs.__version__
   mars_troughs.__docs__


.. data:: ACCUMULATION_MODEL_MAP
   :annotation: :Dict[str, mars_troughs.model.Model]

   

.. class:: AccumulationModel

   Bases: :py:obj:`mars_troughs.model.Model`

   Abstract class for computing the amount of ice accumulation.

   .. method:: get_accumulation_at_t(self, time: numpy.ndarray) -> numpy.ndarray
      :abstractmethod:



.. class:: Linear_Insolation(times: numpy.ndarray, insolations: numpy.ndarray, intercept: float = 1e-06, slope: float = 1e-06)


   Bases: :py:obj:`TimeDependentAccumulationModel`, :py:obj:`mars_troughs.generic_model.LinearModel`

   Accumulation is linear in solar insolation.
   A(ins(t)) = intercept + slope*ins(t).
   A is in m/year.

   :param times: times at which the solar insolation is known
                 (in years)
   :type times: np.ndarray
   :param insolation values: values of solar insolation (in W/m^2)
   :type insolation values: np.ndarray
   :param intercept: accumulation rate at present time.
                     Default is 1e-6 m/year
   :type intercept: float, optional
   :param slope: default is 1e-6 m/year per unit
                 of solar insolation (m^3/(year*W)).
   :type slope: float, optional

   .. method:: get_yt(self, time: numpy.ndarray)

      Calculates the vertical distance y (in m) traveled by a point
      in the center of the high side of the trough. This distance  is a
      function of the accumulation rate A as y(t)=integral(A(ins(t)), dt) or
      dy/dt=A(ins(t))

      :param time: times at which we want to calculate y, in years.
      :type time: np.ndarray

      Output:
          np.ndarray of the same size as time input containing values of
          the vertical distance y, in meters.



.. class:: Linear_Obliquity(obl_times: numpy.ndarray, obliquity: numpy.ndarray, intercept: float = 1.0, slope: float = 1.0)


   Bases: :py:obj:`TimeDependentAccumulationModel`, :py:obj:`mars_troughs.generic_model.LinearModel`

   An accumulation rate model that depends on the time dependent parameter
   (likely solar insolation or obliquity), A(Var(t)).
   A is in m/year. Interpolated splines are created for the parameter as
   a function of time for faster integration.

   :param times: times at which the variable (solar insolation, obliquity) is known
                 (in years)
   :type times: np.ndarray
   :param parameter: values of the time dependent variable
   :type parameter: np.ndarray
   :param (solar insolation:
   :type (solar insolation: in W/m^2), obliquity (in degrees)

   .. method:: get_yt(self, time: numpy.ndarray)

      Calculates the vertical distance y (in m) traveled by a point
      in the center of the high side of the trough. This distance  is a
      function of the accumulation rate A as y(t)=integral(A(obl(t)), dt) or
      dy/dt=A(obl(t))

      :param time: times at which we want to calculate y, in years.
      :type time: np.ndarray

      Output:
          np.ndarray of the same size as time input containing values of
          the vertical distance y, in meters.



.. class:: Quadratic_Insolation(times, insolation, intercept: float = 1.0, linearCoeff: float = 1e-06, quadCoeff: float = 1e-06)


   Bases: :py:obj:`TimeDependentAccumulationModel`, :py:obj:`mars_troughs.generic_model.QuadModel`

   Accumulation rate A (in m/year) as a  quadratic polynomial of insolation.
   A(ins(t)) = intercept + linearCoeff*ins(t)+ quadCoeff*ins(t)^2.
   A is in m/year.

   :param times: times at which the solar insolation is known, in
                 years.
   :type times: np.ndarray
   :param insolations: value of the solar insolations (in W/m^2)
   :type insolations: np.ndarray
   :param intercept: default is 1 m/year
   :type intercept: float, optional
   :param linearCoeff: default is 1e-6 m/year per unit
                       of solar insolation (m^3/(year*W)).
   :type linearCoeff: float, optional
   :param quadCoeff: default is 1e-6 m/year per unit
                     of solar insolation squared (m^5/(year*W^2)).
   :type quadCoeff: float, optional

   .. method:: get_yt(self, time: numpy.ndarray)

      Calculates the vertical distance y (in m) at traveled by a point
      in the center of the high side of the trough. This distance  is a
      function of the accumulation rate A as y(t)=integral(A(ins(t)), dt) or
      dy/dt=A(ins(t))

      :param time: times at which we want to calculate y, in years.
      :type time: np.ndarray

      Output:
          np.ndarray of the same size as time input containing values of
          the vertical distance y, in meters.



.. data:: DATAPATHS
   

   Global object that holds paths.


.. data:: LAG_MODEL_MAP
   :annotation: :Dict[str, mars_troughs.model.Model]

   

.. class:: ConstantLag(constant: float = 1e-06)


   Bases: :py:obj:`LagModel`, :py:obj:`mars_troughs.generic_model.ConstantModel`

   The lag thickness is constant and does not depend on time.

   :param constant: default is 1 millimeter. The lag
                    thickness at all times.
   :type constant: float, optional


.. class:: LagModel

   Bases: :py:obj:`mars_troughs.model.Model`

   Abstract class for lag models, that have a method
   called :meth:`get_lag_at_t` that returns the lag
   as a function of time.

   .. method:: get_lag_at_t(self, time: numpy.ndarray) -> numpy.ndarray

      Lag as a function of time

      :param time: times at which we want to calculate the lag.
      :type time: np.ndarray

      Output:
          np.ndarray of the same size as time input containing values of lag.



.. class:: LinearLag(intercept: float = 1e-06, slope: float = 1e-06)


   Bases: :py:obj:`LagModel`, :py:obj:`mars_troughs.generic_model.LinearModel`

   The lag thickness is linear in time. Lag changes as
   lag(t) = intercept + slope*t.

   :param intercept: default is 1 millimeter. The lag
                     thickness at time t=0 (present day).
   :type intercept: float, optional
   :param slope: default is 1e-6 mm per year. The rate
                 of change of the lag per time.
   :type slope: float, optional


.. class:: Model(sub_models: Optional[List[Model]] = None)


   Bases: :py:obj:`abc.ABC`

   Abstract class for a model, which has methods to keep track of its
   parameters and the parameters of sub-models.

   Parameters of the model **must be attributes** that match the name
   provided in the :meth:`parameter_names` property.

   :param sub_models: models contained within this
                      model that serve their own purpose
   :type sub_models: Optional[List["Model"]]

   .. method:: parameter_names(self) -> List[str]
      :property:

      Names of the parameters for **this** object sorted alphabetically.
      This method **must** be implemented for all subclasses, and the names
      must consist of the names of the attributes that contain the
      parameters.

      Example:

      .. code-block:: python

         class MyModel(Model):
             a = 3

             @property
             def parameter_names(self):
                 return ["a"]

             ...

      :returns: names of parametes for **this** object


   .. method:: parameters(self) -> Dict[str, Any]
      :property:

      The parameters for **this** object, but not any of its sub-models.
      The parameters **must** be attributes of the object

      :returns: name/value pairs where values can be numbers or arrays of numbers


   .. method:: all_parameter_names(self) -> List[str]
      :property:

      Names of the parameters for this object and all sub-models.

      :returns: names of parametes for this object and all sub-models


   .. method:: all_parameters(self) -> Dict[str, Any]
      :property:

      The parameters for this model and all sub-models.

      :returns: key-value pairs for this model and all sub-models



.. class:: Trough(acc_model: Union[str, mars_troughs.model.Model], lag_model: Union[str, mars_troughs.model.Model], acc_params: Optional[List[float]] = None, lag_params: Optional[List[float]] = None, errorbar: float = 1.0, angle: float = 2.9)


   This object models trough migration patterns (TMPs). It is composed of
   a model for the accumulation of ice on the surface of the trough, accessible
   as the :attr:`accuModel` attribute, as well as a model for the lag
   that builds up over time, accesible as the :attr:`lagModel` attribute.

   :param acc_model: name of the accumulation model
                     (linear, quadratic, etc) or a custom model
   :type acc_model: Union[str, Model]
   :param lag_model_name: name of the lag(t) model (constant,
                          linear, etc) or a custom model
   :type lag_model_name: Union[str, Model]
   :param acc_params: model parameters for accumulation
   :type acc_params: List[float]
   :param lag_params: model parameters for lag(t)
   :type lag_params: List[float]
   :param errorbar: errorbar of the datapoints in pixels; default=1
   :type errorbar: float, optional
   :param angle: south-facing slope angle in degrees. Default is 2.9.
   :type angle: float, optional
   :param insolation_path: path to the file with
                           insolation data.
   :type insolation_path: Union[str, Path], optional

   .. method:: set_model(self, acc_params: Dict[str, float], lag_params: Dict[str, float], errorbar: float) -> None

      Updates trough model with new accumulation and lag parameters.

      :param acc_params: Accumulation parameter(s) (same
                         length as current acumulation parameter(s)).
      :type acc_params: Dict[str, float]
      :param lag_params: Lag parameter(s) (same length as
                         current lag parameter(s)).
      :type lag_params: Dict[str, float]
      :param errorbar: Errorbar of the datapoints in pixels
      :type errorbar: float


   .. method:: get_trajectory(self, times: Optional[numpy.ndarray] = None) -> Tuple[numpy.ndarray, numpy.ndarray]

      Obtains the x and y coordinates (in m) of the trough model as a
      function of time.

      :param times: if ``None``, default to the
                    times of the observed solar insolation.
      :type times: Optional[np.ndarray]

      Output:
          x and y coordinates (tuple) of size 2 x len(times) (in m).


   .. method:: _L2_distance(x1, x2, y1, y2) -> Union[float, numpy.ndarray]
      :staticmethod:

      The L2 (Eulerean) distance (squared) between two 2D vectors.

      :param x1: x-coordinate of the first vector
      :type x1: Union[float, np.ndarray]
      :param x2: x-coordinate of the second vector
      :type x2: Union[float, np.ndarray]
      :param y1: y-coordinate of the first vector
      :type y1: Union[float, np.ndarray]
      :param y2: y-coordinate of the second vector
      :type y2: Union[float, np.ndarray]

      Output: L2 distance (int or float)


   .. method:: get_nearest_points(self, x_data: numpy.ndarray, y_data: numpy.ndarray, dist_func: Optional[Callable] = None) -> Tuple[numpy.ndarray, numpy.ndarray]

      Finds the coordinates of the nearest points between the model TMP
      and the data TMP.

      :param x_data: x-coordinates of the data
      :type x_data: np.ndarray
      :param y_data: y-coordinatse of the data
      :type y_data: np.ndarray
      :param dist_func: function to compute distances,
                        defaults to the L2 distance
                        :meth:`mars_troughs.trough.Trough._L2_distance`
      :type dist_func: Optional[Callable]

      Output:
          x and y coordinates of the model TMP that are closer to the data TMP.
          (Tuple), size 2 x len(x_data)


   .. method:: lnlikelihood(self, x_data: numpy.ndarray, y_data: numpy.ndarray) -> float

      Calculates the log-likelihood of the data given the model.
      Note that this is the natural log (ln).

      :param x_data: x-coordinates of the trough path
      :type x_data: np.ndarray
      :param y_data: y-coordinates of the trough path
      :type y_data: np.ndarray

      Output:
          log-likelihood value (float)


   .. method:: angle(self) -> float
      :property:

      Slope angle in degrees.


   .. method:: csc_angle(self) -> float
      :property:

      Cosecant of the slope angle.


   .. method:: cot_angle(self) -> float
      :property:

      Cotangent of the slope angle.



.. data:: __author__
   :annotation: = ['Tom McClintock <thmsmcclintock@gmail.com>', 'Kristel Izquierdo...

   

.. data:: __version__
   :annotation: = 0.0.1

   

.. data:: __docs__
   :annotation: = Simulating martian ice troughs.

   

