:py:mod:`mars_troughs.lag_model`
================================

.. py:module:: mars_troughs.lag_model

.. autoapi-nested-parse::

   Models for the lag as a function of time.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mars_troughs.lag_model.LagModel
   mars_troughs.lag_model.ConstantLag
   mars_troughs.lag_model.LinearLag




Attributes
~~~~~~~~~~

.. autoapisummary::

   mars_troughs.lag_model.LAG_MODEL_MAP


.. py:class:: LagModel(sub_models: Optional[List[Model]] = None)

   Bases: :py:obj:`mars_troughs.model.Model`

   Abstract class for lag models, that have a method
   called :meth:`get_lag_at_t` that returns the lag
   as a function of time.

   .. py:attribute:: prefix
      :annotation: :str = lag_

      All parameters of lag models start with 'lag'.

   .. py:method:: get_lag_at_t(self, time: numpy.ndarray) -> numpy.ndarray

      Lag as a function of time

      :param time: times at which we want to calculate the lag.
      :type time: np.ndarray

      Output:
          np.ndarray of the same size as time input containing values of lag.



.. py:class:: ConstantLag(constant: float = 1e-06)

   Bases: :py:obj:`LagModel`, :py:obj:`mars_troughs.generic_model.ConstantModel`

   The lag thickness is constant and does not depend on time.

   :param constant: default is 1 millimeter. The lag
                    thickness at all times.
   :type constant: float, optional


.. py:class:: LinearLag(constant: float = 1e-06, slope: float = 1e-06)

   Bases: :py:obj:`LagModel`, :py:obj:`mars_troughs.generic_model.LinearModel`

   The lag thickness is linear in time. Lag changes as
   lag(t) = constant + slope*t.

   :param constant: default is 1 millimeter. The lag
                    thickness at time t=0 (present day).
   :type constant: float, optional
   :param slope: default is 1e-6 mm per year. The rate
                 of change of the lag per time.
   :type slope: float, optional


.. py:data:: LAG_MODEL_MAP
   :annotation: :Dict[str, mars_troughs.model.Model]

   

