:py:mod:`mars_troughs.model`
============================

.. py:module:: mars_troughs.model

.. autoapi-nested-parse::

   Abstract class for all models.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mars_troughs.model.Model




.. py:class:: Model

   Bases: :py:obj:`abc.ABC`

   Abstract class for a model, which has methods to keep track of its
   parameters and the parameters of sub-models.

   Parameters of the model **must be attributes** that match the name
   provided in the :meth:`parameter_names` property.

   :param sub_models: models contained within this
                      model that serve their own purpose
   :type sub_models: Optional[List["Model"]]

   .. py:property:: parameter_names
      :type: List[str]
      :abstractmethod:

      Names of the parameters for **this** object sorted alphabetically.
      This method **must** be implemented for all subclasses, and the names
      must consist of the names of the attributes that contain the
      parameters.

      Example:

      .. code-block:: python

         class MyModel(Model):
             a = 3

             @property
             def parameter_names(self):
                 return ["a"]

             ...

      :returns: names of parametes for **this** object

   .. py:property:: parameters
      :type: Dict[str, Any]

      The parameters for **this** object, but not any of its sub-models.
      The parameters **must** be attributes of the object.

      :returns: name/value pairs where values can be numbers or arrays of numbers

   .. py:attribute:: prefix
      :type: Optional[str]

      A prefix to prepend to parameter names when supplying them.


